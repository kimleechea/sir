# Written by Kimlee Chea
# Date: 2021-09-27
# STAT 128-01 F21
library(tidyverse)
library("lattice")
library(gridExtra)
set.seed(1095)
#'Create a randomly infected matrix
#'
#' @export
step_infection = function(x=50,z=50,w=0.1){
if(x >=1 && z >=1 && w >= 0 && w <= 1){
y = sample(c(1, 0), size = x * z, replace = TRUE, prob = c(w, (1-w)))
dd <- matrix(y, nrow = x, ncol = z)
class(dd) = c("SIR", class(dd))
return(dd)
}else{
stop("x must be a positive integer; y must be a positive integer; w must be between 0 and 1")
}
}
step_susceptible = function(x,y){
new_infections = unique(x)
new_infections = step_removed(new_infections)
infcoord <- which(new_infections == 2, arr.ind = T)
# if(is_infectious(new_infections)){
# TOP CELL
cc = sample(c(1, 0), size = (nrow(x))*(ncol(x)-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = nrow(x), ncol = ncol(x)-1)
infected = x[, -ncol(x)] == 2
new_infections[,-1][infected & cc] = 1
# BOTTOM CELL
cc = sample(c(1, 0), size = (nrow(x))*(ncol(x)-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = nrow(x), ncol = ncol(x)-1)
infected = x[,-1] == 2
new_infections[,-ncol(x)][infected & cc] = 1
# LEFT CELL
cc = sample(c(1, 0), size = (nrow(x)-1)*(ncol(x)), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = nrow(x)-1, ncol = ncol(x))
infected = x[-1,] == 2
new_infections[-nrow(x),][infected & cc] = 1
# RIGHT CELL
cc = sample(c(1, 0), size = (nrow(x)-1)*(ncol(x)), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = nrow(x)-1, ncol = ncol(x))
infected = x[-nrow(x),] == 2
new_infections[-1,][infected & cc] = 1
# DIAGONAL TOP-RIGHT CELL
cc = sample(c(1, 0), size = (nrow(x)-1)*(ncol(x)-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = nrow(x)-1, ncol = ncol(x)-1)
infected = x[-nrow(x), -ncol(x)] == 2
new_infections[-1,-1][infected & cc] = 1
# DIAGONAL TOP-LEFT CELL
cc = sample(c(1, 0), size = (nrow(x)-1)*(ncol(x)-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = nrow(x)-1, ncol = ncol(x)-1)
infected = x[-1, -ncol(x)] == 2
new_infections[-nrow(x),-1][infected & cc] = 1
# DIAGONAL BOTTOM-RIGHT CELL
cc = sample(c(1, 0), size = (nrow(x)-1)*(ncol(x)-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = nrow(x)-1, ncol = ncol(x)-1)
infected = x[-nrow(x), -1] == 2
new_infections[-1,-ncol(x)][infected & cc] = 1
# DIAGONAL BOTTOM-LEFT CELL
cc = sample(c(1, 0), size = (nrow(x)-1)*(ncol(x)-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = nrow(x)-1, ncol = ncol(x)-1)
infected = x[-1,-1] == 2
new_infections[-nrow(x),-ncol(x)][infected & cc] = 1
# }
# if(length(new_infections[,-1][infected & cc]) < 2){
#   return(step_removed(new_infections))
# }
# print(new_infections[,-1][infected & cc])
# SET INFECTED GREY CELLS
# print(nrow(infcoord))
for(i in 1:nrow(infcoord)){
new_infections[infcoord[i,1],infcoord[i,2]] <- 2
}
return(new_infections)
}
step_removed = function(x){
x[x==1] <- 2
return(x)
}
infect_one = function(x){
cc = sample(c(TRUE, FALSE), size = 1, replace = TRUE, prob = c(x,(1-x)))
return(cc)
}
is_infectious = function(x){
hasinfecting <- any(x==1)
if(hasinfecting==TRUE){
return(TRUE)
}else{
return(FALSE)
}
}
#'Plot a matrix
#'
#' @export
plot_infection = function(dd){
sir_colors = c("white","red","grey")
levelplot( dd,
col.regions=sir_colors, colorkey = FALSE,
at = c(-Inf, seq(0.0, 1, by = 1), Inf))
}
#'Create an SIR simulation with given arguments
#'
#' @param nrow number of rows in grid
#' @param ncol number of columns in grid
#' @param p probability of infecting a neighbor cell
#' @param p0 initial probability of population to be infected
#' @param plot set to TRUE to display plot of matrix
#' @param time_per_frame time interval between each infection step
#' @export
sir = function(nrow = 50, ncol = 50, p = 0.2, p0 = 0.1, plot = FALSE, time_per_frame = 0.2, ...){
if(plot == TRUE){
infection <- step_infection(nrow, ncol, p0)
plot_infection(infection)
Sys.sleep(time_per_frame)
infection <- step_susceptible(infection,p)
repeat{
infection <- step_susceptible(infection,p)
p1 <- plot_infection(infection)
grid.arrange(p1, nrow=1)
Sys.sleep(time_per_frame)
if(is_infectious(infection) == FALSE){
break
}
}
infection <- step_removed(infection)
p1 <- plot_infection(infection)
grid.arrange(p1, nrow=1)
# print(infection)
Sys.sleep(time_per_frame)
}
}
# sir(plot = TRUE)
# initialinf <- step_infection(64,64)
# p1 <- plot_infection(initialinf)
# inf1 = step_susceptible(initialinf)
# p2 <- plot_infection(inf1)
# inf2 = step_susceptible(inf1)
# p3 <- plot_infection(inf2)
# inf3 = step_susceptible(inf2)
# p4 <- plot_infection(inf3)
# inf4 = step_susceptible(inf3)
# p5 <- plot_infection(inf4)
# inf5 = step_susceptible(inf4)
# p6 <- plot_infection(inf5)
# grid.arrange(p1, p2, p3, p4, p5, p6, nrow=3, ncol=2)
sir(plot = TRUE)
sir(plot = TRUE)
x= matrix(1:5)
x[1:3]= 1:4
x[1:3,]= 1:4
x
debug(step_susceptible)
undebug(step_susceptible)
options(error=recover)
step_susceptible()
sir(plot=TRUE)
infcoord
sir(plot=TRUE)
source("C:/Users/Kimlee/Desktop/STAT 128/sir/R/SIR_Submission.R")
sir(plot=TRUE)
sir(plot=TRUE, p = 0.1)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.01)
# Written by Kimlee Chea
# Date: 2021-09-27
# STAT 128-01 F21
library(tidyverse)
library("lattice")
library(gridExtra)
set.seed(1095)
#'Create a randomly infected matrix
#'
#' @export
step_infection = function(x=50,z=50,w=0.1){
if(x >=1 && z >=1 && w >= 0 && w <= 1){
y = sample(c(1, 0), size = x * z, replace = TRUE, prob = c(w, (1-w)))
dd <- matrix(y, nrow = x, ncol = z)
class(dd) = c("SIR", class(dd))
return(dd)
}else{
stop("x must be a positive integer; y must be a positive integer; w must be between 0 and 1")
}
}
step_susceptible = function(x,y){
new_infections = x
# new_infections = step_removed(new_infections)
infcoord <- which(new_infections == 2, arr.ind = T)
n = nrow(x)
p = ncol(x)
# TOP CELL
cc = sample(c(1, 0), size = (n)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n, ncol = p-1)
infected = x[, -p] == 1
new_infections[,-1][infected & cc] = 1
# BOTTOM CELL
cc = sample(c(1, 0), size = (n)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n, ncol = p-1)
infected = x[,-1] == 1
new_infections[,-p][infected & cc] = 1
# LEFT CELL
cc = sample(c(1, 0), size = (n-1)*(p), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p)
infected = x[-1,] == 1
new_infections[-n,][infected & cc] = 1
# RIGHT CELL
cc = sample(c(1, 0), size = (n-1)*(p), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p)
infected = x[-n,] == 1
new_infections[-1,][infected & cc] = 1
# DIAGONAL TOP-RIGHT CELL
cc = sample(c(1, 0), size = (n-1)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p-1)
infected = x[-n, -p] == 1
new_infections[-1,-1][infected & cc] = 1
# DIAGONAL TOP-LEFT CELL
cc = sample(c(1, 0), size = (n-1)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p-1)
infected = x[-1, -p] == 1
new_infections[-n,-1][infected & cc] = 1
# DIAGONAL BOTTOM-RIGHT CELL
cc = sample(c(1, 0), size = (n-1)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p-1)
infected = x[-n, -1] == 1
new_infections[-1,-p][infected & cc] = 1
# DIAGONAL BOTTOM-LEFT CELL
cc = sample(c(1, 0), size = (n-1)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p-1)
infected = x[-1,-1] == 1
new_infections[-n,-p][infected & cc] = 1
# SET INFECTED GREY CELLS
# print(nrow(infcoord))
for(i in 1:nrow(infcoord)){
new_infections[infcoord[i,1],infcoord[i,2]] <- 2
}
return(new_infections)
}
step_removed = function(x){
x[x==1] <- 2
return(x)
}
infect_one = function(x){
cc = sample(c(TRUE, FALSE), size = 1, replace = TRUE, prob = c(x,(1-x)))
return(cc)
}
is_infectious = function(x){
hasinfecting <- any(x==1)
if(hasinfecting==TRUE){
return(TRUE)
}else{
return(FALSE)
}
}
#'Plot a matrix
#'
#' @export
plot_infection = function(dd){
sir_colors = c("white","red","grey")
levelplot( dd,
col.regions=sir_colors, colorkey = FALSE,
at = c(-Inf, seq(0.0, 1, by = 1), Inf))
}
#'Create an SIR simulation with given arguments
#'
#' @param nrow number of rows in grid
#' @param ncol number of columns in grid
#' @param p probability of infecting a neighbor cell
#' @param p0 initial probability of population to be infected
#' @param plot set to TRUE to display plot of matrix
#' @param time_per_frame time interval between each infection step
#' @export
sir = function(nrow = 50, ncol = 50, p = 0.2, p0 = 0.1, plot = FALSE, time_per_frame = 0.2, ...){
if(plot == TRUE){
infection <- step_infection(nrow, ncol, p0)
plot_infection(infection)
Sys.sleep(time_per_frame)
infection <- step_susceptible(infection,p)
repeat{
infection <- step_susceptible(infection,p)
p1 <- plot_infection(infection)
grid.arrange(p1, nrow=1)
Sys.sleep(time_per_frame)
if(is_infectious(infection) == FALSE){
break
}
}
infection <- step_removed(infection)
p1 <- plot_infection(infection)
grid.arrange(p1, nrow=1)
# print(infection)
Sys.sleep(time_per_frame)
}
}
sir(plot = TRUE)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.01)
q
# Written by Kimlee Chea
# Date: 2021-09-27
# STAT 128-01 F21
library(tidyverse)
library("lattice")
library(gridExtra)
set.seed(1095)
#'Create a randomly infected matrix
#'
#' @export
step_infection = function(x=50,z=50,w=0.1){
if(x >=1 && z >=1 && w >= 0 && w <= 1){
y = sample(c(1, 0), size = x * z, replace = TRUE, prob = c(w, (1-w)))
dd <- matrix(y, nrow = x, ncol = z)
class(dd) = c("SIR", class(dd))
return(dd)
}else{
stop("x must be a positive integer; y must be a positive integer; w must be between 0 and 1")
}
}
step_susceptible = function(x,y){
new_infections = x
new_infections = step_removed(new_infections)
infcoord <- which(new_infections == 2, arr.ind = T)
n = nrow(x)
p = ncol(x)
# TOP CELL
cc = sample(c(1, 0), size = (n)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n, ncol = p-1)
infected = x[, -p] == 1
new_infections[,-1][infected & cc] = 1
# BOTTOM CELL
cc = sample(c(1, 0), size = (n)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n, ncol = p-1)
infected = x[,-1] == 1
new_infections[,-p][infected & cc] = 1
# LEFT CELL
cc = sample(c(1, 0), size = (n-1)*(p), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p)
infected = x[-1,] == 1
new_infections[-n,][infected & cc] = 1
# RIGHT CELL
cc = sample(c(1, 0), size = (n-1)*(p), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p)
infected = x[-n,] == 1
new_infections[-1,][infected & cc] = 1
# DIAGONAL TOP-RIGHT CELL
cc = sample(c(1, 0), size = (n-1)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p-1)
infected = x[-n, -p] == 1
new_infections[-1,-1][infected & cc] = 1
# DIAGONAL TOP-LEFT CELL
cc = sample(c(1, 0), size = (n-1)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p-1)
infected = x[-1, -p] == 1
new_infections[-n,-1][infected & cc] = 1
# DIAGONAL BOTTOM-RIGHT CELL
cc = sample(c(1, 0), size = (n-1)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p-1)
infected = x[-n, -1] == 1
new_infections[-1,-p][infected & cc] = 1
# DIAGONAL BOTTOM-LEFT CELL
cc = sample(c(1, 0), size = (n-1)*(p-1), replace = TRUE, prob = c(y,(1-y)))
cc = matrix(cc, nrow = n-1, ncol = p-1)
infected = x[-1,-1] == 1
new_infections[-n,-p][infected & cc] = 1
# SET INFECTED GREY CELLS
# print(nrow(infcoord))
for(i in 1:nrow(infcoord)){
new_infections[infcoord[i,1],infcoord[i,2]] <- 2
}
return(new_infections)
}
step_removed = function(x){
x[x==1] <- 2
return(x)
}
infect_one = function(x){
cc = sample(c(TRUE, FALSE), size = 1, replace = TRUE, prob = c(x,(1-x)))
return(cc)
}
is_infectious = function(x){
hasinfecting <- any(x==1)
if(hasinfecting==TRUE){
return(TRUE)
}else{
return(FALSE)
}
}
#'Plot a matrix
#'
#' @export
plot_infection = function(dd){
sir_colors = c("white","red","grey")
levelplot( dd,
col.regions=sir_colors, colorkey = FALSE,
at = c(-Inf, seq(0.0, 1, by = 1), Inf))
}
#'Create an SIR simulation with given arguments
#'
#' @param nrow number of rows in grid
#' @param ncol number of columns in grid
#' @param p probability of infecting a neighbor cell
#' @param p0 initial probability of population to be infected
#' @param plot set to TRUE to display plot of matrix
#' @param time_per_frame time interval between each infection step
#' @export
sir = function(nrow = 50, ncol = 50, p = 0.2, p0 = 0.1, plot = FALSE, time_per_frame = 0.2, ...){
if(plot == TRUE){
infection <- step_infection(nrow, ncol, p0)
plot_infection(infection)
Sys.sleep(time_per_frame)
infection <- step_susceptible(infection,p)
repeat{
infection <- step_susceptible(infection,p)
p1 <- plot_infection(infection)
grid.arrange(p1, nrow=1)
Sys.sleep(time_per_frame)
if(is_infectious(infection) == FALSE){
break
}
}
infection <- step_removed(infection)
p1 <- plot_infection(infection)
grid.arrange(p1, nrow=1)
# print(infection)
Sys.sleep(time_per_frame)
}
}
sir(plot = TRUE)
sir(plot=TRUE, p = 0.1)
sir(plot=TRUE, p = 0.1)
sir(plot=TRUE, p = 0.1)
sir(plot=TRUE, p = 0.2)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.2)
sir(plot=TRUE, p = 0.2)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.1)
sir(plot=TRUE, p = 0.2)
sir(plot=TRUE, p = 0.1)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.2)
sir(plot=TRUE, p = 0.1)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.2)
sir(plot=TRUE, p = 0.1)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.1)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.01)
sir(plot=TRUE, p = 0.2)
sir(plot=TRUE, p = 0.2, p0 = 0.01)
sir(plot=TRUE, p = 0.2, p0 = 0.01)
sir(plot=TRUE, p = 0.2, p0 = 0.01)
sir(plot=TRUE, p = 0.2, p0 = 0.01)
sir(plot=TRUE, p = 0.2, p0 = 0.01)
